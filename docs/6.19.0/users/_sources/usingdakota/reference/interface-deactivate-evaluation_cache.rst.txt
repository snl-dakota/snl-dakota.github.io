.. _interface-deactivate-evaluation_cache:

""""""""""""""""
evaluation_cache
""""""""""""""""


Do not retain function evaluation history in memory


.. toctree::
   :hidden:
   :maxdepth: 1



**Specification**

- *Alias:* None

- *Arguments:* None


**Description**


Do not retain the complete function evaluation history in memory.

This can be important for reducing memory requirements in large-scale
applications (i.e., applications with a large number of variables or
response functions) and for eliminating the overhead of searching for
duplicates within the function evaluation cache prior to each new
function evaluation (e.g., for improving speed in problems with 1000's
of inexpensive function evaluations or for eliminating overhead when
performing timing studies).

However, the downside is that unnecessary computations may be
performed since duplication in function evaluation requests may not be
detected. For this reason, this option is not recommended when
function evaluations are costly.

Note: duplication detection within Dakota can be deactivated, but
duplication detection features within specific optimizers may still be
active.


