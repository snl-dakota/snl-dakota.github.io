.. _method-moga-crossover_type-multi_point_real:

""""""""""""""""
multi_point_real
""""""""""""""""


Perform crossover in real valued genome


.. toctree::
   :hidden:
   :maxdepth: 1



**Specification**

- *Alias:* None

- *Arguments:* INTEGER


**Description**


There are many crossover types available.  ``multi_point_binary``
crossover requires an integer number, N, of crossover points.  This
crossover type performs a bit switching crossover at N crossover
points in the binary encoded genome of two designs.  Thus, crossover
may occur at any point along a solution chromosome (in the middle of a
gene representing a design variable, for example).
``multi_point_parameterized_binary`` crossover is similar in that it
performs a bit switching crossover routine at N crossover points.
However, this crossover type performs crossover on each design variable
individually. So the individual chromosomes are crossed at N locations.
``multi_point_real`` crossover performs a variable switching crossover routing at
N crossover points in the real real valued genome of two designs. In this
scheme, crossover only occurs between design variables (chromosomes).  Note that
the standard solution chromosome representation in the JEGA algorithm is real
encoded and can handle integer or real design variables.  For any crossover
types that use a binary representation, real variables are converted to long
integers by multiplying the real number by 10^6 and then truncating. Note that
this assumes a precision of only six decimal places. Discrete variables are
represented as integers (indices within a list of possible values) within the
algorithm and thus require no special treatment by the binary operators.


