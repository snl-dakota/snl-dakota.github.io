.. _method-efficient_global-batch_size:

""""""""""
batch_size
""""""""""


Total batch size in parallel EGO


.. toctree::
   :hidden:
   :maxdepth: 1

   method-efficient_global-batch_size-exploration
   method-efficient_global-batch_size-synchronization


**Specification**

- *Alias:* None

- *Arguments:* INTEGER


**Child Keywords:**

+-------------------------+--------------------+---------------------+---------------------------------------------+
| Required/Optional       | Description of     | Dakota Keyword      | Dakota Keyword Description                  |
|                         | Group              |                     |                                             |
+=========================+====================+=====================+=============================================+
| Optional                                     | `exploration`__     | Portion of batch size dedicated to          |
|                                              |                     | exploration in parallel EGO                 |
+----------------------------------------------+---------------------+---------------------------------------------+
| Optional                                     | `synchronization`__ | Select how Dakota schedules a batch of      |
|                                              |                     | concurrent function evaluations in a        |
|                                              |                     | parallel algorithm                          |
+----------------------------------------------+---------------------+---------------------------------------------+

.. __: method-efficient_global-batch_size-exploration.html
__ method-efficient_global-batch_size-synchronization.html



**Description**


Refinement candidates are generated by an acquisition
function such as maximum expected improvement, which balances
exploration and exploitation.  Refinement candidates can also be
generated by purely explorative metrics such as maximum prediction
variance.  For a specified ``batch_size``, ``exploration`` specifies the
subset of this total that will be dedicated to pure exploration of the
parameter space.

*Default Behavior*
All of the batch size is devoted to the standard acquisition approach,
balancing exploration and exploitation.



**Examples**



.. code-block::

    method,
            efficient_global
          seed = 1237
          batch_size = 8    # total
          exploration = 2   # 2 out of 8




