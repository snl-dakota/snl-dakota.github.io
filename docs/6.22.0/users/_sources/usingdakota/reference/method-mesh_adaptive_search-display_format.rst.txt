.. _method-mesh_adaptive_search-display_format:

""""""""""""""
display_format
""""""""""""""


Information to be reported from mesh adaptive search's internal
records.


.. toctree::
   :hidden:
   :maxdepth: 1



**Specification**

- *Alias:* None

- *Arguments:* STRING


**Description**


The ``display_format`` keyword is used to specify the set of
information to be reported by the mesh adaptive direct search method.
This is information mostly internal to the method and not reported via
Dakota output.

*Default Behavior*

By default, only the number of function evaluations (bbe) and the
objective function value (obj) are reported.

The full list of options is as follows.  Note that case does not
matter.


- BBE: Blackbox evaluations.
- BBO: Blackbox outputs.
- EVAL: Evaluations (includes cache hits).
- MESH_INDEX: Mesh index.
- MESH_SIZE: Mesh size parameter.
- OBJ: Objective function value.
- POLL_SIZE: Poll size parameter.
- SOL: Solution, with format iSOLj where i and j are two (optional) strings: i will be displayed before each coordinate, and j after each coordinate (except the last).
- STAT_AVG: The AVG statistic.
- STAT_SUM: The SUM statistic defined by argument.
- TIME: Wall-clock time.
- VARi: Value of variable i. The index 0 corresponds to the first variable.

*Expected Outputs*

A list of the requested information will be printed to the screen.

*Usage Tips*

This will most likely only be useful for power users who want to
understand and/or report more detailed information on method behavior.



**Examples**


The following example shows the syntax for specifying
``display_format``.  Note that all desired information options should be
listed within a single string.


.. code-block::

    method
      mesh_adaptive_search
        display_format 'bbe obj poll_size'
        seed = 1234


Below is the output reported for the above example.


.. code-block::

    MADS run {
    
     BBE OBJ POLL_SIZE
    
        1 17.0625000000 2.0000000000 2.0000000000 2.0000000000
        2 1.0625000000 2.0000000000 2.0000000000 2.0000000000
       13 0.0625000000 1.0000000000 1.0000000000 1.0000000000
       24 0.0002441406 0.5000000000 0.5000000000 0.5000000000
       41 0.0000314713 0.1250000000 0.1250000000 0.1250000000
       43 0.0000028610 0.2500000000 0.2500000000 0.2500000000
       54 0.0000000037 0.1250000000 0.1250000000 0.1250000000
       83 0.0000000000 0.0078125000 0.0078125000 0.0078125000
      105 0.0000000000 0.0009765625 0.0009765625 0.0009765625
      112 0.0000000000 0.0009765625 0.0009765625 0.0009765625
      114 0.0000000000 0.0019531250 0.0019531250 0.0019531250
      135 0.0000000000 0.0004882812 0.0004882812 0.0004882812
      142 0.0000000000 0.0004882812 0.0004882812 0.0004882812
      153 0.0000000000 0.0004882812 0.0004882812 0.0004882812
      159 0.0000000000 0.0009765625 0.0009765625 0.0009765625
      171 0.0000000000 0.0004882812 0.0004882812 0.0004882812
      193 0.0000000000 0.0000610352 0.0000610352 0.0000610352
      200 0.0000000000 0.0000610352 0.0000610352 0.0000610352
      207 0.0000000000 0.0000610352 0.0000610352 0.0000610352
      223 0.0000000000 0.0000305176 0.0000305176 0.0000305176
      229 0.0000000000 0.0000610352 0.0000610352 0.0000610352
      250 0.0000000000 0.0000152588 0.0000152588 0.0000152588
      266 0.0000000000 0.0000076294 0.0000076294 0.0000076294
      282 0.0000000000 0.0000038147 0.0000038147 0.0000038147
      288 0.0000000000 0.0000076294 0.0000076294 0.0000076294
      314 0.0000000000 0.0000009537 0.0000009537 0.0000009537
      320 0.0000000000 0.0000019073 0.0000019073 0.0000019073
      321 0.0000000000 0.0000038147 0.0000038147 0.0000038147
      327 0.0000000000 0.0000076294 0.0000076294 0.0000076294
      354 0.0000000000 0.0000004768 0.0000004768 0.0000004768
      361 0.0000000000 0.0000004768 0.0000004768 0.0000004768
      372 0.0000000000 0.0000004768 0.0000004768 0.0000004768
      373 0.0000000000 0.0000009537 0.0000009537 0.0000009537
      389 0.0000000000 0.0000004768 0.0000004768 0.0000004768
      400 0.0000000000 0.0000004768 0.0000004768 0.0000004768
      417 0.0000000000 0.0000001192 0.0000001192 0.0000001192
      444 0.0000000000 0.0000000075 0.0000000075 0.0000000075
      459 0.0000000000 0.0000000037 0.0000000037 0.0000000037
      461 0.0000000000 0.0000000075 0.0000000075 0.0000000075
      488 0.0000000000 0.0000000005 0.0000000005 0.0000000005
      492 0.0000000000 0.0000000009 0.0000000009 0.0000000009
      494 0.0000000000 0.0000000019 0.0000000019 0.0000000019
      501 0.0000000000 0.0000000019 0.0000000019 0.0000000019
      518 0.0000000000 0.0000000005 0.0000000005 0.0000000005
      530 0.0000000000 0.0000000002 0.0000000002 0.0000000002
      537 0.0000000000 0.0000000002 0.0000000002 0.0000000002
      564 0.0000000000 0.0000000000 0.0000000000 0.0000000000
      566 0.0000000000 0.0000000000 0.0000000000 0.0000000000
      583 0.0000000000 0.0000000000 0.0000000000 0.0000000000
      590 0.0000000000 0.0000000000 0.0000000000 0.0000000000
      592 0.0000000000 0.0000000000 0.0000000000 0.0000000000
      604 0.0000000000 0.0000000000 0.0000000000 0.0000000000
      606 0.0000000000 0.0000000000 0.0000000000 0.0000000000
      629 0.0000000000 0.0000000000 0.0000000000 0.0000000000
      636 0.0000000000 0.0000000000 0.0000000000 0.0000000000
      658 0.0000000000 0.0000000000 0.0000000000 0.0000000000
      674 0.0000000000 0.0000000000 0.0000000000 0.0000000000
    
    } end of run (mesh size reached NOMAD precision)
    
    blackbox evaluations                     : 674
    best feasible solution                   : ( 1 1 1 ) h=0 f=1.073537728e-52




